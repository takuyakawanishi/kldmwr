diff --git a/.DS_Store b/.DS_Store
deleted file mode 100644
index 29ffba4..0000000
Binary files a/.DS_Store and /dev/null differ
diff --git a/.gitignore b/.gitignore
index 11185e9..55c1d95 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,7 +1,5 @@
 # https://github.com/github/gitignore/blob/master/Python.gitignore
 
-# TK specific
-trials_memos/
 
 # Byte-compiled / optimized / DLL files
 __pycache__/
diff --git a/kldmwr/.DS_Store b/kldmwr/.DS_Store
deleted file mode 100644
index 90c87d2..0000000
Binary files a/kldmwr/.DS_Store and /dev/null differ
diff --git a/kldmwr/auxiliaries/tgraph.py b/kldmwr/auxiliaries/tgraph.py
index 9e12630..1370bb4 100644
--- a/kldmwr/auxiliaries/tgraph.py
+++ b/kldmwr/auxiliaries/tgraph.py
@@ -26,7 +26,6 @@ LWPT = .8  # Line width for plot (thick)
 
 
 def color_pallet_cud():
-
     cud = {
         'red': (255 / 255, 75 / 255, 0),
         'yellow': (255 / 255, 241 / 255, 0),
@@ -90,9 +89,9 @@ def set_figure_dimensions_in_points():
     """
     dimensions = {
         'wom': 0,  # Width of outer margin
-        'hom': 0,  # Height of outer margin
+        'hom': 0,  # Width of outer margin
         'wfm': 4,  # Width of figure margin
-        'hfm': 4,  # Height of figure margin
+        'hfm': 4,
         'wpg': 4,  # Width of panel gap
         'hpg': 4,
         'ws': 72,
@@ -104,7 +103,7 @@ def set_figure_dimensions_in_points():
         'wsp': 0,
         'hsp': 0,
         'wfg': 8,  # Width of figure gap
-        'hfg': 8,  # Height of figure gap
+        'hfg': 8,  # Height of panel gap
     }
     dimensions['wl'] = dimensions['wyl'] + dimensions['wtl']
     dimensions['hl'] = dimensions['hxl'] + dimensions['htl']
@@ -351,7 +350,7 @@ class TFigure(object):
                     direction='out', labelsize=FSTL)
 
                 nvp_figi = self.n_panels_vertical[i]
-                ihor = int(i_ax / nvp_figi)
+                ihor = np.int(i_ax / nvp_figi)
                 ivar = np.mod(i_ax, nvp_figi)
                 vis_x = self.show_xaxis_label_ticks_figs[i, ivar, 1]
                 vis_y = self.show_yaxis_label_ticks_figs[i, ihor, 1]
@@ -367,7 +366,7 @@ class TFigure(object):
             for i_ax, ax in enumerate(self.axs[i]):
                 nvp_figi = self.n_panels_vertical[i]
                 nhp_figi = self.n_panels_horizontal[i]
-                ihor = int(i_ax / nvp_figi)
+                ihor = np.int(i_ax / nvp_figi)
                 ivar = np.mod(i_ax, nvp_figi)
                 ax.xaxis.set_visible(
                     self.show_xaxis_label_ticks_figs[i, ivar, 1]
diff --git a/kldmwr/univar.py b/kldmwr/univar.py
index 736f7f5..9f6c37a 100644
--- a/kldmwr/univar.py
+++ b/kldmwr/univar.py
@@ -15,25 +15,6 @@ def weights_zbc(counts):
     wz[1:] += counts
     return 0.5 * wz
 
-
-def weights_zbc_left(counts):
-    wz = np.zeros(len(counts) + 1)
-    wz[: -1] = counts
-    wz[1:] += counts
-    wz = 0.5 * wz
-    wz[-1] = wz[-1] + 0.5
-    return wz
-
-
-def weights_zbc_right(counts):
-    wz = np.zeros(len(counts) + 1)
-    wz[: -1] = counts
-    wz[1:] += counts
-    wz = 0.5 * wz
-    wz[0] = wz[0] + 0.5
-    return wz
-
-    
 # Depreciated
 # def weights_nbc(counts):
 #    wn = np.zeros(len(counts) + 1)
@@ -51,11 +32,8 @@ def weights_nbc(counts):
     wz[-1] = wz[-1] + 0.5
     return wz
 
-
-# For backward compatibility
 weights_nbc_2 = weights_nbc
 
-
 def calc_ls(p, x_unq, cdf, wgt, vtxvals):
     vtxvals[1: -1] = cdf(x_unq, p)
     sps = np.diff(vtxvals)
@@ -130,24 +108,20 @@ def find_minimizer(
     vtxvals = np.zeros(len(x_unq) + 2)
     vtxvals[-1] = 1.
     wgt = np.zeros(len(x_unq) + 1)
-
-    if variant == 'zbc':
+    if variant is 'zbc':
         wgt[:] = weights_zbc(cnt)
-    elif variant == 'nbc':
-        wgt[:] = weights_nbc(cnt)
-    elif variant == 'ml':
+    elif variant is 'nbc':
+        wgt[:] = weights_nbc_2(cnt)
+        # wgt[:] = weights_nbc(cnt)
+    elif variant is 'ml':
         wgt = np.copy(cnt)
         vtxvals = np.zeros(len(x_unq))
-    elif variant == 'zbc_left':
-        wgt[:] = weights_zbc_left(cnt)
-    elif variant == 'zbc_right':
-        wgt[:] = weights_zbc_right(cnt)
 
     res = None
     res_x = np.empty(len(p))
-    res_x[:] = np.nan
+    res_x[:] = np.NaN
     success = False
-    minimum = np.nan
+    minimum = np.NaN
     try:
         if ipf is None:
             res = scipy.optimize.minimize(
@@ -173,9 +147,9 @@ def find_minimizer(
                 if epsilon < 0:
                     return p_est, minimum, success, res
 
-    except Exception as ex:
-        print(ex)
-        
+    except(RuntimeError, TypeError, NameError):
+        pass
+
     else:
         if res.success:
             est_input_same = False
@@ -262,6 +236,8 @@ def find_ge(x, p, cdf, ipf=None):
 #    wn[-1] = 1
 #    return wn
 
+
+
        (the array of estimated parameters, negative maximum product
        of spacings, boolean indicating success or not,
        the whole results of the scipy.optimize.minimize function)
@@ -304,24 +280,6 @@ def find_se(x, p, cdf, ipf=None):
             x, p, calc_gl_ipf, cdf, variant='nbc', ipf=ipf)
 
 
-def find_lzbce(x, p, cdf, ipf=None):
-    if ipf is None:
-        return find_minimizer(
-            x, p, calc_gl, cdf, variant='zbc_left')
-    else:
-        return find_minimizer(
-            x, p, calc_gl_ipf, cdf, variant='zbc_left', ipf=ipf)
-
-
-def find_rzbce(x, p, cdf, ipf=None):
-    if ipf is None:
-        return find_minimizer(
-            x, p, calc_gl, cdf, variant='zbc_right')
-    else:
-        return find_minimizer(
-            x, p, calc_gl_ipf, cdf, variant='zbc_right', ipf=ipf)
-
-
 def calc_mse(x, x_0):
     return ((x - x_0) ** 2).mean()
 #
@@ -377,15 +335,13 @@ def find_min_viv(x, p, find_estimate, pdf_or_cdf, p_ints=None, ipf=None):
     else:
         p_ints = p_ints
     res_x = np.empty(len(p))
-    res_x[:] = np.nan
+    res_x[:] = np.NaN
     success = False
-    minimum = np.nan
+    minimum = np.NaN
     df = None
     count = 0
     count_same = 0
-    count_fail = 0
     ress = []
-    df_columns = set_df_columns_min_viv(p)
     for p_int in p_ints:
         res = find_estimate(x, p_int, pdf_or_cdf, ipf)
         if res[2]:
@@ -394,28 +350,22 @@ def find_min_viv(x, p, find_estimate, pdf_or_cdf, p_ints=None, ipf=None):
             ress.append(contents)
             if 2 <= count:
                 if np.allclose(
-                        ress[count - 1][0:len(p)], ress[count - 2][0:len(p)],
-                        atol=1e-4):
+                        ress[count - 1][0:len(p)], ress[count - 2][0:len(p)], atol=1e-4):
                     count_same += 1
                 else:
                     count_same = 0
-        else:
-            count_fail += 1
-            row = np.empty(len(df_columns))
-            row[:] = np.nan
-            ress.append(row)
         if count_same >= 2:
             break
-    if count > 0:
+
+    if count != 0:
+        df_columns = set_df_columns_min_viv(p)
         df = pd.DataFrame(ress, columns=df_columns)
-        idx_min = df[['mmps']].idxmin()
-        idx_pars = []
+        minv = df.iloc[df['mmps'].idxmin(), :]
+        res_x = []
         for i in range(len(p)):
-            idx_pars.append("par_hat_" + str(i))
-        res_x = df.loc[idx_min, idx_pars].to_numpy()[0]
-        # print("======== univar")
-        # print(res_x)
-        minimum = df.loc[idx_min, 'mmps'].to_numpy()[0]
+            res_x.append([minv['par_hat_' + str(i)]])
+        res_x = np.array(res_x)
+        minimum = minv['mmps']
         success = True
 
     return res_x, minimum, success, df
diff --git a/setup.py b/setup.py
index 3a3739d..7654662 100644
--- a/setup.py
+++ b/setup.py
@@ -3,7 +3,7 @@ from setuptools import setup, find_packages
 
 setup(
     name='kldmwr',  # Required
-    version='0.7.11',  # Required
+    version='0.7.9',  # Required
     description="Parameter Estimation Library Based on KLDMWR Framework",
     url='https://github.com/takuyakawanishi/kldmwr',
     author='Takuya Kawanishi',
@@ -13,4 +13,4 @@ setup(
     license='MIT',
     packages=find_packages(),
     install_requires=['matplotlib', 'numpy', 'scipy', 'pandas'],
-)
\ No newline at end of file
+)
diff --git a/tests/.DS_Store b/tests/.DS_Store
deleted file mode 100644
index 980e4e1..0000000
Binary files a/tests/.DS_Store and /dev/null differ
diff --git a/tests/test_gev.py b/tests/test_gev.py
index b09f932..c0d2f6e 100644
--- a/tests/test_gev.py
+++ b/tests/test_gev.py
@@ -1,10 +1,7 @@
 import unittest
 import numpy as np
-import sys
-sys.path.append("./")
-import inference.development_kldmwr.kldmwr.kldmwr.univar as univar
-from inference.development_kldmwr.kldmwr.kldmwr import distributions
-from inference.development_kldmwr.kldmwr.kldmwr import gev
+from kldmwr import distributions
+from kldmwr import gev
 
 
 class TestCalcDerivativesOfh(unittest.TestCase):
diff --git a/tests/test_univar.py b/tests/test_univar.py
index 1902610..740bd2e 100644
--- a/tests/test_univar.py
+++ b/tests/test_univar.py
@@ -1,11 +1,7 @@
 import unittest
 import numpy as np
-# from kldmwr import univar
-# from kldmwr.distributions import *
-import sys
-sys.path.append("./")
-import inference.development_kldmwr.kldmwr.kldmwr.univar as univar
-from inference.development_kldmwr.kldmwr.kldmwr.distributions import *
+from kldmwr import univar
+from kldmwr.distributions import *
 
 
 class TestUniverFinds(unittest.TestCase):
@@ -41,20 +37,10 @@ class TestUniverWeights(unittest.TestCase):
     #    np.testing.assert_almost_equal(w_nbc, w_nbc_expctd, decimal=4)
 
     def test_weights_nbc_2(self):
-        w_zbc = univar.weights_nbc(self.cnt)
+        w_zbc = univar.weights_nbc_2(self.cnt)
         w_zbc_expctd = [1, 1., 1.5, 1.5, 2., 2., 1]
         np.testing.assert_equal(w_zbc, w_zbc_expctd)
 
-    def test_weights_zbc_left(self):
-        w_zbc_left = univar.weights_zbc_left(self.cnt)
-        w_zbc_left_expctd = [0.5, 1., 1.5, 1.5, 2., 2., 1]
-        np.testing.assert_equal(w_zbc_left, w_zbc_left_expctd)
-
-    def test_weights_zbc_right(self):
-        w_zbc_right = univar.weights_zbc_right(self.cnt)
-        w_zbc_right_expctd = [1, 1., 1.5, 1.5, 2., 2., 0.5]
-        np.testing.assert_equal(w_zbc_right, w_zbc_right_expctd)
-
 
 class TestUniverCalcs(unittest.TestCase):
 
@@ -139,7 +125,6 @@ class TestUniverFindMinVivGEVMLE(unittest.TestCase):
         res = univar.find_min_viv(self.x, p_0, univar.find_mle, pdf)
         hat_p_expected = [0.92544841, 0.86717912, 1.20619691]
         minimum_expected = 20.667777025526618
-        print(res[0])
         np.testing.assert_almost_equal(res[0], hat_p_expected, decimal=4)
         np.testing.assert_almost_equal(res[1], minimum_expected, decimal=4)
 
diff --git a/trials_memos/Untitled.ipynb b/trials_memos/Untitled.ipynb
deleted file mode 100644
index 997d2ef..0000000
--- a/trials_memos/Untitled.ipynb
+++ /dev/null
@@ -1,58 +0,0 @@
-{
- "cells": [
-  {
-   "cell_type": "markdown",
-   "id": "997b4e5c",
-   "metadata": {},
-   "source": [
-    "#### \n",
-    "\n",
-    "find_minimizer(x, p, calc_gl, cdf, variant='zbc')\n",
-    "\n",
-    "calc_gl\n",
-    "\n",
-    "```Python\n",
-    "calc_both   calc_ge, zbc\n",
-    "calc_left\n",
-    "calc_right\n",
-    "calc_none calc_ge, nbc\n",
-    "```"
-   ]
-  },
-  {
-   "cell_type": "markdown",
-   "id": "9702e2e5",
-   "metadata": {},
-   "source": [
-    "```Python\n",
-    "wgt = weights_xxx(cnt)\n",
-    "\n",
-    "weights_zbc_left(cnt) new\n",
-    "weights_zbc_right(cnt)\n",
-    "```"
-   ]
-  }
- ],
- "metadata": {
-  "hide_input": false,
-  "kernelspec": {
-   "display_name": "Python 3 (ipykernel)",
-   "language": "python",
-   "name": "python3"
-  },
-  "language_info": {
-   "codemirror_mode": {
-    "name": "ipython",
-    "version": 3
-   },
-   "file_extension": ".py",
-   "mimetype": "text/x-python",
-   "name": "python",
-   "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
-   "version": "3.9.13"
-  }
- },
- "nbformat": 4,
- "nbformat_minor": 5
-}
